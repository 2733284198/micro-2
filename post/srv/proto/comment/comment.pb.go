// Code generated by protoc-gen-go. DO NOT EDIT.
// source: post/srv/proto/comment/comment.proto

/*
Package go_micro_srv_post is a generated protocol buffer package.

It is generated from these files:
	post/srv/proto/comment/comment.proto

It has these top-level messages:
	ReqComment
	RspComments
	CommentDto
*/
package go_micro_srv_post

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ReqComment struct {
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *ReqComment) Reset()                    { *m = ReqComment{} }
func (m *ReqComment) String() string            { return proto.CompactTextString(m) }
func (*ReqComment) ProtoMessage()               {}
func (*ReqComment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ReqComment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type RspComments struct {
	Comments []*CommentDto `protobuf:"bytes,1,rep,name=comments" json:"comments,omitempty"`
}

func (m *RspComments) Reset()                    { *m = RspComments{} }
func (m *RspComments) String() string            { return proto.CompactTextString(m) }
func (*RspComments) ProtoMessage()               {}
func (*RspComments) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RspComments) GetComments() []*CommentDto {
	if m != nil {
		return m.Comments
	}
	return nil
}

type CommentDto struct {
	Content string `protobuf:"bytes,1,opt,name=content" json:"content,omitempty"`
}

func (m *CommentDto) Reset()                    { *m = CommentDto{} }
func (m *CommentDto) String() string            { return proto.CompactTextString(m) }
func (*CommentDto) ProtoMessage()               {}
func (*CommentDto) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *CommentDto) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqComment)(nil), "go.micro.srv.post.ReqComment")
	proto.RegisterType((*RspComments)(nil), "go.micro.srv.post.RspComments")
	proto.RegisterType((*CommentDto)(nil), "go.micro.srv.post.CommentDto")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Comment service

type CommentClient interface {
	GetComments(ctx context.Context, in *ReqComment, opts ...client.CallOption) (*RspComments, error)
}

type commentClient struct {
	c           client.Client
	serviceName string
}

func NewCommentClient(serviceName string, c client.Client) CommentClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.micro.srv.post"
	}
	return &commentClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *commentClient) GetComments(ctx context.Context, in *ReqComment, opts ...client.CallOption) (*RspComments, error) {
	req := c.c.NewRequest(c.serviceName, "Comment.GetComments", in)
	out := new(RspComments)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Comment service

type CommentHandler interface {
	GetComments(context.Context, *ReqComment, *RspComments) error
}

func RegisterCommentHandler(s server.Server, hdlr CommentHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Comment{hdlr}, opts...))
}

type Comment struct {
	CommentHandler
}

func (h *Comment) GetComments(ctx context.Context, in *ReqComment, out *RspComments) error {
	return h.CommentHandler.GetComments(ctx, in, out)
}

func init() { proto.RegisterFile("post/srv/proto/comment/comment.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0xc8, 0x2f, 0x2e,
	0xd1, 0x2f, 0x2e, 0x2a, 0xd3, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x4f, 0xce, 0xcf, 0xcd, 0x4d,
	0xcd, 0x2b, 0x81, 0xd1, 0x7a, 0x60, 0x51, 0x21, 0xc1, 0xf4, 0x7c, 0xbd, 0xdc, 0xcc, 0xe4, 0xa2,
	0x7c, 0xbd, 0xe2, 0xa2, 0x32, 0x3d, 0x90, 0x16, 0x25, 0x19, 0x2e, 0xae, 0xa0, 0xd4, 0x42, 0x67,
	0x88, 0x32, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0xa6,
	0xcc, 0x14, 0x25, 0x0f, 0x2e, 0xee, 0xa0, 0xe2, 0x02, 0xa8, 0x6c, 0xb1, 0x90, 0x25, 0x17, 0x07,
	0xd4, 0xc0, 0x62, 0x09, 0x46, 0x05, 0x66, 0x0d, 0x6e, 0x23, 0x59, 0x3d, 0x0c, 0x23, 0xf5, 0xa0,
	0xca, 0x5d, 0x4a, 0xf2, 0x83, 0xe0, 0xca, 0x95, 0xd4, 0xb8, 0xb8, 0x10, 0xe2, 0x42, 0x12, 0x5c,
	0xec, 0xc9, 0xf9, 0x79, 0x25, 0xa9, 0x79, 0x25, 0x60, 0xcb, 0x38, 0x83, 0x60, 0x5c, 0xa3, 0x48,
	0x2e, 0x76, 0x98, 0x63, 0xfc, 0xb8, 0xb8, 0xdd, 0x53, 0x4b, 0xe0, 0x96, 0x63, 0xb3, 0x0a, 0xe1,
	0x74, 0x29, 0x39, 0x6c, 0xd2, 0x08, 0xb7, 0x2b, 0x31, 0x24, 0xb1, 0x81, 0x03, 0xc1, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x9d, 0xef, 0x35, 0x9f, 0x2c, 0x01, 0x00, 0x00,
}
